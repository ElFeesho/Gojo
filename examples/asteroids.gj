-- Game Data
Game.name = "Asteroids"
Game.author = "Feesh!"
Game.w = 640
Game.h = 480
Game.bpp = 16
Game.fullscreen = 0
Game.update_tick = 20
Game.audio = 1
--Random seed baby
math.randomseed(os.time())

--Ship
ship = {}
ship.x = Game.w/2
ship.y = Game.h/2
ship.h = 10*Game.h/480
ship.w = 5*Game.h/480
ship.rot = 0
ship.xspeed = 0
ship.yspeed = 0
ship.alive = 1
ship.die_time = 0

--Bullets
bullets = {}

--Lives
lives = 1
score = 0
gameover = 0
accel = 0.1

-- Accuracy
shots_fired = 0
shots_hit = 0
accuracy = 0

--Asteroids
asteroids = {}

key_left = 0
key_right = 0
key_up = 0
key_fire = 0

fire_shot = 1

max_bullets = 10
bullet_timeout = 2000
bullet_speed = 4
bullet_count = 1

round = 1

clear_time = 0
gameover_time = 0
last_time = 0

-- Pause Timer to prevent rapid pausing
ptime = 0

-- MUSIC!

music = nil 
shot = nil
explo = nil
shipexplo = nil

paused = 0

-- Fonts

score_fnt = nil
gameover_fnt = nil
round_fnt = nil

function restart()
	on_init()
end

function on_resize()
	-- Called on a video mode switch
	ship.x = Game.w/2
	ship.y = Game.h/2
	ship.h = 10*Game.h/480
	ship.w = 5*Game.h/480

end

function draw_ship(time)
	if(ship.alive == 1) then
		tp_x = ship.x+math.cos(ship.rot)*ship.h
		tp_y = ship.y+math.sin(ship.rot)*ship.h
		br_x = ship.x+math.cos(ship.rot+2.09)*ship.w
		br_y = ship.y+math.sin(ship.rot+2.09)*ship.w
		bl_x = ship.x+math.cos(ship.rot+4.18)*ship.w
		bl_y = ship.y+math.sin(ship.rot+4.18)*ship.w
		SDL.draw_line(tp_x, tp_y, br_x, br_y,"cyan")
		SDL.draw_line(tp_x,tp_y,bl_x,bl_y,"cyan")
		SDL.draw_line(bl_x,bl_y,ship.x,ship.y,"cyan")
		SDL.draw_line(br_x,br_y,ship.x,ship.y,"cyan")
		if(asteroids~=nil) then
			for cast = 0, #asteroids, 1 do
				if(ship.x>asteroids[cast].x-asteroids[cast].r and ship.x<asteroids[cast].x+asteroids[cast].r and ship.y>asteroids[cast].y-asteroids[cast].r and ship.y<asteroids[cast].y+asteroids[cast].r) then
					SDL.sound_play(shipexplo)
					ship.alive = 0
					ship.die_time = time
					ship.debris = {}
					ship.debris.points = {}
					ship.debris.points[0] = { x = tp_x, y = tp_y, rot = math.random(0,360), rotspeed = math.random(3,8) }
					ship.debris.points[1] = { x = tp_x, y = tp_y, rot = math.random(0,360), rotspeed = math.random(3,8) }
					ship.debris.points[2] = { x = br_x, y = br_y, rot = math.random(0,360), rotspeed = math.random(3,8) }
					ship.debris.points[3] = { x = bl_x, y = bl_y, rot = math.random(0,360), rotspeed = math.random(3,8) }
					destroy_asteroid(cast, time)
					lives = lives - 1
					break
				end
			end
		end
	else
		if(time<ship.die_time+3000) then
			for debris = 0, 3, 1 do
				ship.debris.points[debris].x = ship.debris.points[debris].x + ship.xspeed
				ship.debris.points[debris].y = ship.debris.points[debris].y + ship.yspeed
				ship.debris.points[debris].rot = ship.debris.points[debris].rot + ship.debris.points[debris].rotspeed
				SDL.draw_line(ship.debris.points[debris].x,ship.debris.points[debris].y,ship.debris.points[debris].x+math.cos(math.rad(ship.debris.points[debris].rot))*20,ship.debris.points[debris].y+math.sin(math.rad(ship.debris.points[debris].rot))*20,"cyan")
			end
		else
			if(lives==0) then
				gameover = 1
				fire_shot = 0
				gameover_time = time
				SDL.music_fade_out(1500)
				return
			end
			ship.x = Game.w/2
			ship.y = Game.h/2
			ship.xspeed = 0
			ship.yspeed = 0
			ship.rot = math.rad(-90)
			if(asteroids~=nil) then
				for cast = 0, #asteroids, 1 do
					if(ship.x>asteroids[cast].x-asteroids[cast].r and ship.x<asteroids[cast].x+asteroids[cast].r and ship.y>asteroids[cast].y-asteroids[cast].r and ship.y<asteroids[cast].y+asteroids[cast].r) then
						return
					end
				end
			end
			ship.alive = 1
		end
	end
end

function generate_debris(x,y,radius)
	for index=#asteroids+1,#asteroids+2,1 do
		asteroids[index] = { x = x, y = y, r = radius, xspeed = 0.1 * math.random(1,9) , yspeed = 0.1*math.random(1,9)}
		if(math.random(1,2)<1.5) then
			asteroids[index].xspeed = asteroids[index].xspeed * -1
		end
		if(math.random(1,2)<1.5) then
			asteroids[index].yspeed = asteroids[index].yspeed * -1
		end
		asteroids[index].rotspeed = math.random(-6,6)
		asteroids[index].rot = math.random(0,359)
		asteroids[index].points = {}
		for cang = 0, 10, 1 do
			asteroids[index].points[cang] = {}
			asteroids[index].points[cang].offset = math.random(asteroids[index].r/8*3,asteroids[index].r)
		end
	end
end

function generate_asteroids(amount)
	asteroids = nil
	if(asteroids == nil) then
		asteroids = {}
	end
	for cast = 0, amount-1, 1 do
		asteroids[cast] = {}
		if(math.random(0,2)<1) then
			asteroids[cast].x = math.random(0,Game.w/4)
			asteroids[cast].y = math.random(0,Game.h)
		else
			asteroids[cast].x = math.random(Game.w-Game.w/4,Game.w)
			asteroids[cast].y = math.random(0,Game.h)
		end
		asteroids[cast].r = Game.h/16
		asteroids[cast].xspeed = 0.1*math.random(1,7)
		asteroids[cast].yspeed = 0.1*math.random(1,7)
		if(math.random(1,2)<1.5) then
			asteroids[cast].xspeed = asteroids[cast].xspeed * -1
		end
		if(math.random(1,2)<1.5) then
			asteroids[cast].yspeed = asteroids[cast].yspeed * -1
		end
		asteroids[cast].rotspeed = math.random(-3,3)
		asteroids[cast].rot = math.random(0,359)
		asteroids[cast].points = {}
		for cang = 0, 10, 1 do
			asteroids[cast].points[cang] = {}
			asteroids[cast].points[cang].offset = math.random(asteroids[cast].r/8*4,asteroids[cast].r)
		end
	end
end

function draw_asteroids()
	if(asteroids == nil) then
		return
	end
	for cast = 0,#asteroids,1 do
		asteroids[cast].x = asteroids[cast].x + asteroids[cast].xspeed
		asteroids[cast].y = asteroids[cast].y + asteroids[cast].yspeed
		asteroids[cast].rot = asteroids[cast].rot + asteroids[cast].rotspeed
		if(asteroids[cast].x-asteroids[cast].r > Game.w) then
			asteroids[cast].x = 0-asteroids[cast].r
		end
		if(asteroids[cast].y-asteroids[cast].r > Game.h) then
			asteroids[cast].y = 0-asteroids[cast].r
		end
		if(asteroids[cast].x+asteroids[cast].r < 0) then
			asteroids[cast].x = Game.w+asteroids[cast].r
		end
		if(asteroids[cast].y+asteroids[cast].r < 0) then
			asteroids[cast].y = Game.h+asteroids[cast].r
		end
		for cang = 0, 10, 1 do
			if(cang~=10) then
				px_one = asteroids[cast].x + math.cos(math.rad(asteroids[cast].rot+(36*cang)))*asteroids[cast].points[cang].offset 
				py_one = asteroids[cast].y + math.sin(math.rad(asteroids[cast].rot+(36*cang)))*asteroids[cast].points[cang].offset
				px_two = asteroids[cast].x + math.cos(math.rad(asteroids[cast].rot+(36*(cang+1))))*asteroids[cast].points[cang+1].offset
				py_two = asteroids[cast].y + math.sin(math.rad(asteroids[cast].rot+(36*(cang+1))))*asteroids[cast].points[cang+1].offset
				SDL.draw_line(px_one,py_one,px_two,py_two,"cyan")
			else
				px_one = asteroids[cast].x + math.cos(math.rad(asteroids[cast].rot+(36*cang)))*asteroids[cast].points[cang].offset 
				py_one = asteroids[cast].y + math.sin(math.rad(asteroids[cast].rot+(36*cang)))*asteroids[cast].points[cang].offset
				px_two = asteroids[cast].x + math.cos(math.rad(asteroids[cast].rot))*asteroids[cast].points[0].offset
				py_two = asteroids[cast].y + math.sin(math.rad(asteroids[cast].rot))*asteroids[cast].points[0].offset
				SDL.draw_line(px_one,py_one,px_two,py_two,"cyan")
			end
		end
	end
end

function destroy_asteroid(index,time)
	if(asteroids[index].r > 10) then
		generate_debris(asteroids[index].x,asteroids[index].y,asteroids[index].r/2)
	end
	if(#asteroids == 0) then
		--Next level
		clear_time = time
		accuracy = shots_hit/shots_fired*100
		asteroids = nil
	else
		table.remove(asteroids,index)
	end
	if(ship.alive == 1) then
		score = score+1
		if(score%250 == 0) then
			lives = lives+1
		end
	end
end

function create_bullet(time)
	if(bullet_count<=max_bullets) then
		shots_fired = shots_fired + 1
		bullets[bullet_count] = { x = ship.x+math.cos(ship.rot)*20, y = ship.y+math.sin(ship.rot)*20, rot = ship.rot, time = time, active = 1 }
		bullet_count = bullet_count + 1
		SDL.sound_play(shot)
	end
end

function update_bullets(time)
	for cbul = #bullets, 0, -1 do
		if(bullets[cbul]~=nil) then
			if(bullets[cbul].active == 1) then
				if(bullets[cbul].time<time-bullet_timeout) then
					table.remove(bullets,cbul)
					bullet_count = bullet_count - 1
				else
					SDL.draw_line(bullets[cbul].x,bullets[cbul].y,bullets[cbul].x,bullets[cbul].y,"cyan")
					bullets[cbul].x = bullets[cbul].x + math.cos(bullets[cbul].rot)*bullet_speed 
					bullets[cbul].y = bullets[cbul].y + math.sin(bullets[cbul].rot)*bullet_speed
					if(bullets[cbul].x>Game.w) then
						bullets[cbul].x = 0
					end
					if(bullets[cbul].x<0) then
						bullets[cbul].x = Game.w
					end
					if(bullets[cbul].y>Game.h) then
						bullets[cbul].y = 0
					end
					if(bullets[cbul].y<0) then
						bullets[cbul].y = Game.h
					end
					if(asteroids~=nil) then
						for cast = 0, #asteroids, 1 do
							--INSERT CIRCULAR COLISION HERE!
							if(bullets[cbul].x > asteroids[cast].x-asteroids[cast].r and bullets[cbul].x < asteroids[cast].x+asteroids[cast].r and bullets[cbul].y > asteroids[cast].y-asteroids[cast].r and bullets[cbul].y < asteroids[cast].y+asteroids[cast].r) then
								shots_hit = shots_hit + 1
								destroy_asteroid(cast,time)
								SDL.sound_play(explo)
								if(cbul~=0)then
									table.remove(bullets,cbul)
								else
									bullets[cbul] = nil
								end
								bullet_count = bullet_count - 1
								break
							end
						end
					end
				end
			end
		end
	end
end

function draw_score()
	score_fnt:draw(0,0,"blue","Score: "..score)
end

function draw_lives()
	for count = 1, lives, 1 do
		x = count*8+10
		y = 20
		SDL.draw_line(x,y,x-4,y+10,"cyan")
		SDL.draw_line(x,y,x+4,y+10,"cyan")
		SDL.draw_line(x-4,y+10,x,y+7,"cyan")
		SDL.draw_line(x+4,y+10,x,y+7,"cyan")
	end
end

function on_init()
	--Prolly a better way of doing this
	ship.x = Game.w/2
	ship.y = Game.h/2
	ship.rot = math.rad(-90)
	ship.xspeed = 0
	ship.yspeed = 0
	ship.alive = 1
	ship.die_time = 0
	score = 0
	lives = 5
	gameover = 0
	fire_shot = 1
	accel = 0
	round = 1
	generate_asteroids(Game.h/32)
	SDL.mouse_hide()

	music = SDL.music_load("music/music.xm")
	SDL.music_fade_in(music, -1, 1000)

	shot = SDL.sound_load("sounds/shot.ogg")
	explo = SDL.sound_load("sounds/explo.ogg")
	shipexplo = SDL.sound_load("sounds/shipexplo.ogg")

	score_fnt = SDL.text_load("fonts/arial.ttf",16)
	gameover_fnt = SDL.text_load("fonts/sa.ttf",32)
	round_fnt = SDL.text_load("fonts/arial.ttf",36)
end

function on_update(time)
	if(SDL.get_key(string.byte("1"))) then
		Game.w = 640
		Game.h = 480
		Game.fullscreen = 0
		SDL.reset_video()
	end
	if(SDL.get_key(string.byte("2"))) then
		Game.w = 800
		Game.h = 600
		Game.fullscreen = 0
		SDL.reset_video()
	end
	if(SDL.get_key(string.byte("3"))) then
		Game.w = 1024
		Game.h = 768
		Game.fullscreen = 0
		SDL.reset_video()
	end
	if(SDL.get_key(string.byte("4"))) then
		Game.w = 640
		Game.h = 480
		Game.fullscreen = 1
		SDL.reset_video()
	end
	if(SDL.get_key(string.byte("5"))) then
		Game.w = 800
		Game.h = 600
		Game.fullscreen = 1
		SDL.reset_video()
	end
	if(SDL.get_key(string.byte("6"))) then
		Game.w = 1024
		Game.h = 768
		Game.fullscreen = 1
		SDL.reset_video()
	end
	if(SDL.get_key(string.byte("p")) and time>ptime+200) then
		paused = 1-paused
		ptime = time
	end
	if(paused == 1) then
		return
	end
	SDL.draw_rect(0,0,Game.w, Game.h, "black")
	if(gameover~=1) then
		if(ship.alive == 1) then
			if(SDL.get_key(276)) then
				ship.rot = ship.rot - 0.1
			end
			if(SDL.get_key(275)) then
				ship.rot = ship.rot + 0.1
			end
			if(SDL.get_key(273)) then		
				if(accel<0.2) then
					accel = accel + 0.03
				end
				ship.xspeed = ship.xspeed + math.cos(ship.rot)*accel
				ship.yspeed = ship.yspeed + math.sin(ship.rot)*accel
			else
				accel = accel * 0.5
			end
			if(SDL.get_key(32)) then
				if(fire_shot == 1) then
					create_bullet(time)
					fire_shot = 0
				end
			else
				fire_shot = 1
			end
		end
		update_bullets(time)
		ship.x = ship.x + ship.xspeed
		ship.y = ship.y + ship.yspeed
		if(ship.x<0) then
			ship.x = Game.w
		end
		if(ship.y<0) then
			ship.y = Game.h
		end
		if(ship.x>Game.w) then
			ship.x = 0
		end
		if(ship.y>Game.h) then
			ship.y = 0
		end
		draw_ship(time)
		if(asteroids~=nil) then
			draw_asteroids()
		else
			if(clear_time ~= nil and ship.alive == 1) then
				round_fnt:draw(Game.w/2-70,Game.h/2-36,"#ffffff","Round "..(round+1))
				score_fnt:draw(Game.w/2-70,Game.h/2+5,"#ffffff","Accuracy: "..string.format("%2g",accuracy).."%")
				if(accuracy >= 75 and accuracy<80) then
					score_fnt:draw(Game.w/2-70,Game.h/2+25,"#ff0000","BONUS! - Good Accuracy!")			
				end
				if(accuracy >= 80 and accuracy<90) then
					score_fnt:draw(Game.w/2-70,Game.h/2+25,"#ff0000","BONUS! - Great Accuracy!")			
				end
				if(accuracy >= 90 and accuracy<100) then
					score_fnt:draw(Game.w/2-70,Game.h/2+25,"#ff0000","BONUS! - Astounding Accuracy!!!")
				end
				if(accuracy == 100) then
					score_fnt:draw(Game.w/2-70,Game.h/2+25,"#ff0000","BONUS! - TWO HANDED HAX!")
				end
				if(time>clear_time+3000) then
					if(ship.x > Game.w/2 - 100 and ship.x < Game.w/2 + 100 and ship.y > Game.h/2-100 and ship.y < Game.h/2+100) then
						round = round + 1
						generate_asteroids(Game.h/32+(math.floor(round/2)))
						clear_time = nil
						shots_fired = 0
						shots_hit = 0
						if(accuracy >= 75 and accuracy<80) then
							score = score + 25
						end
						if(accuracy >= 80 and accuracy<90) then
							score = score + 35
						end
						if(accuracy >= 90 and accuracy<100) then
							score = score + 50			
						end
						if(accuracy == 100) then
							score = score + 200
						end
					end
				end
			end
		end
		draw_score()
		draw_lives()
	else
		gameover_fnt:draw(Game.w/2-120,Game.h/2-30,"red","Game Over")
		if(time>gameover_time+2500) then
			score_fnt:draw(Game.w/2-70,Game.h/2+20,"cyan","Press Fire To Restart")
			if(SDL.get_key(32)) then
				on_init()
				fire_shot = 0
			end
		end
	end
	if(SDL.get_key(27)) then
		SDL.quit()
	end
end

function on_key_down(keyval)
	if(keyval == 276) then
		key_left = 1
	end
	if(keyval == 275) then
		key_right = 1
	end
	if(keyval == 273) then
		key_up = 1
	end
	if(keyval == 32 and key_fire == 0) then
		key_fire = 1
		fire_shot = 1
	end
	if(keyval == 27) then
		SDL.quit()
	end
end

function on_key_up(keyval)
	if(keyval == 276) then
		key_left = 0
	end
	if(keyval == 275) then
		key_right = 0
	end
	if(keyval == 273) then
		key_up = 0
	end
	if(keyval == 32) then
		key_fire = 0
	end
end

function on_quit()
	SDL.music_stop()
end
